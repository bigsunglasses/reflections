What happens when you initialize a repository? Why do you need to do it?

	A new hidden file called .git is created that stores metadata about the files in the repository. 
	You need to initialize the repository with 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Files in the staging area can be committed to the repository; they cannot be committed from the working directory.
	Files in the staging area appear in git log as able trackable, but the files in the working directory are not trackable.
	
	Can commit multiple files at once out of the staging area if that is desirable.
	Can add "wrapper" information to a file that is not part of it but will be saved along with it in git.
	

How can you use the staging area to make sure you have one commit per logical
change?

	Before you commit a file, you can compare the file in the staging area to the current
	file in the repository to verify that you have only made one logical change. Then you 
	can commmit.
	
	You also can see the list of files that have been added to the staging area so that
	you only commit files that are related to the one logical change.
	
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Adding a new experimental feature, refactoring, fixing bugs, multiple people working on different features of the same project.
	
	Branches help because you can always go back to the original point if you don't like your changes or break the code. 
	Multiple people can work on different facets.

How do the diagrams help you visualize the branch structure?

	Can easily see the main branch and the side branches that are currently being worked on.
	Can see the thought process in getting to the tip of the branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	One branch is merged into another branch which becomes the head of the one merged branch. 
	All of the commits of merging branch are accessible from the resulting merged branch.
	The merging branch is no longer needed.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?